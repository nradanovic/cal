{"version":3,"sources":["models/models.tsx","components/timeScale/timeScale.tsx","components/timeSlot/time-slot.tsx","components/day/day.tsx","components/week/week.tsx","init/generateCalendar.tsx","init/generateRandomData.tsx","hooks/useCalendarReducer.tsx","services/validators.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TimeSlotStatus","TimeScale","calendar","Fragment","visibleSlots","map","slot","className","Math","floor","startTime","toString","padStart","morningShift","endTime","breakStart","breakEnd","afternoonShift","saturdayShift","initCalendarSettings","daysToDisplay","startHour","endHour","timeSlotDuration","getTimeSlotLabel","status","AVAILABLE","LUNCH_BREAK","NOT_WORKING","RESERVED","UNAVAILABLE","TimeSlot","DayComponent","day","onTimeSlotClick","timeSlotStatusCssClass","getCssClassForStatus","timeSlotCssClasses","timeSlots","onClick","Week","days","date","toLocaleDateString","generateCalendar","initDate","startDate","Date","calendarSettings","start","slotDuration","numberOfSlots","calculateNumberOfTimeSlotsInADay","Array","_","index","display","duration","generateVisibleSlots","generateCalendarDays","length","setDate","getDate","shift","getDay","isSunday","isOddDayOfMonth","isSaturday","isEvanDayOfMonth","calculateShift","shiftSettings","generateTimeSlotsInADay","generateDay","calculateMinutesFromTime","time","hour","minute","calculateTimeSlotStatusFromShift","generateRandomReservations","randomSlots","daysWithAvailableSlot","filter","find","availableSlots","random","randomSlot","getTime","push","addReservedSlotToWeek","reservedSlots","reservedSlot","reducer","state","action","type","useCalendarReducer","useReducer","numberOfDays","generateCalendarData","dispatch","updateSlot","reduce","all","alert","selectedDay","checkReservationInADayLimit","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.546c0058.chunk.js","sourcesContent":["export interface Shift {\r\n  startTime: number;\r\n  endTime: number;\r\n  breakStart: number;\r\n  breakEnd: number;\r\n}\r\n\r\nexport const morningShift: Shift = {\r\n  startTime: 8 * 60,\r\n  endTime: 14 * 60,\r\n  breakStart: 11 * 60,\r\n  breakEnd: 11 * 60 + 30,\r\n};\r\n\r\nexport const afternoonShift: Shift = {\r\n  startTime: 13 * 60,\r\n  endTime: 19 * 60,\r\n  breakStart: 16 * 60,\r\n  breakEnd: 16 * 60 + 30,\r\n};\r\n\r\nexport const saturdayShift: Shift = {\r\n  startTime: 8 * 60,\r\n  endTime: 14 * 60,\r\n  breakStart: 11 * 60,\r\n  breakEnd: 11 * 60 + 30,\r\n};\r\nexport interface CalendarSettings {\r\n  daysToDisplay: number;\r\n  startHour: number;\r\n  endHour: number;\r\n  timeSlotDuration: number;\r\n}\r\n\r\nexport const initCalendarSettings: CalendarSettings = {\r\n  daysToDisplay: 7,\r\n  startHour: 7,\r\n  endHour: 20,\r\n  timeSlotDuration: 30,\r\n};\r\n\r\nexport enum TimeSlotStatus {\r\n  NOT_WORKING,\r\n  AVAILABLE,\r\n  LUNCH_BREAK,\r\n  UNAVAILABLE,\r\n  RESERVED,\r\n}\r\n\r\nexport interface Calendar {\r\n  startDate: Date;\r\n  calendarSettings: CalendarSettings;\r\n  days: Day[];\r\n  visibleSlots: VisibleSlot[];\r\n}\r\n\r\nexport interface Day {\r\n  date: Date;\r\n  shiftSettings: Shift | null;\r\n  timeSlots: Slot[];\r\n}\r\n\r\nexport interface Slot {\r\n  date: Date;\r\n  startTime: number;\r\n  duration: number;\r\n  status: TimeSlotStatus;\r\n}\r\n\r\nexport interface VisibleSlot {\r\n  startTime: number;\r\n  duration: number;\r\n  display: boolean;\r\n}\r\n","import React from \"react\";\r\nimport { Calendar } from \"../../models/models\";\r\nimport \"./timeScale.css\";\r\n\r\nexport const TimeScale: React.FC<{ calendar: Calendar }> = ({ calendar }) => {\r\n  return (\r\n    <React.Fragment>\r\n      {calendar.visibleSlots.map((slot) => (\r\n        <ul className=\"day\">\r\n          <li>\r\n            <span>{Math.floor(slot.startTime / 60)}</span>:\r\n            <span>{(slot.startTime % 60).toString().padStart(2, \"0\")}</span>\r\n          </li>\r\n        </ul>\r\n      ))}\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Slot, TimeSlotStatus } from \"../../models/models\";\r\nimport \"./time-slot.css\";\r\n\r\nfunction getTimeSlotLabel(status: TimeSlotStatus) {\r\n  switch (status) {\r\n    case TimeSlotStatus.AVAILABLE:\r\n      return \"Available\";\r\n    case TimeSlotStatus.LUNCH_BREAK:\r\n      return \"Lunch break\";\r\n    case TimeSlotStatus.NOT_WORKING:\r\n      return \"Not working\";\r\n    case TimeSlotStatus.RESERVED:\r\n      return \"Reserved\";\r\n    case TimeSlotStatus.UNAVAILABLE:\r\n      return \"Unavailable\";\r\n\r\n    default:\r\n      break;\r\n  }\r\n}\r\nexport default function TimeSlot({ slot }: { slot: Slot }) {\r\n  return <span className=\"time-slot\">{getTimeSlotLabel(slot.status)}</span>;\r\n}\r\n","import React from \"react\";\r\nimport { Day, Slot, TimeSlotStatus } from \"../../models/models\";\r\nimport TimeSlot from \"../timeSlot/time-slot\";\r\nimport \"./day.css\";\r\n\r\nfunction getCssClassForStatus(status: TimeSlotStatus): string {\r\n  switch (status) {\r\n    case TimeSlotStatus.NOT_WORKING:\r\n      return \"not-working\";\r\n    case TimeSlotStatus.AVAILABLE:\r\n      return \"available\";\r\n    case TimeSlotStatus.UNAVAILABLE:\r\n      return \"unavailable\";\r\n    case TimeSlotStatus.LUNCH_BREAK:\r\n      return \"lunch-break\";\r\n    case TimeSlotStatus.RESERVED:\r\n      return \"reserved\";\r\n\r\n    default:\r\n      return \"unavailable\";\r\n  }\r\n}\r\n\r\nexport default function DayComponent({\r\n  day,\r\n  onTimeSlotClick,\r\n}: {\r\n  day: Day;\r\n  onTimeSlotClick: any;\r\n}) {\r\n  const fixedTimeSlotCssClass = \"time-slot\";\r\n  const timeSlotStatusCssClass = (slot: Slot) =>\r\n    getCssClassForStatus(slot.status);\r\n  const timeSlotCssClasses = (slot: Slot) =>\r\n    `${fixedTimeSlotCssClass} ${timeSlotStatusCssClass(slot)}`;\r\n\r\n  const onClick = (slot: Slot) => {\r\n    if (\r\n      slot.status === TimeSlotStatus.AVAILABLE ||\r\n      slot.status === TimeSlotStatus.RESERVED\r\n    ) {\r\n      onTimeSlotClick(slot);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ul>\r\n      {\" \"}\r\n      {day.timeSlots.map((slot) => (\r\n        <li className={timeSlotCssClasses(slot)} onClick={() => onClick(slot)}>\r\n          <TimeSlot slot={slot}></TimeSlot>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Day } from \"../../models/models\";\r\nimport DayComponent from \"../day/day\";\r\nimport \"./week.css\";\r\n\r\nexport const Week: React.FC<{ days: Day[]; onTimeSlotClick: any }> = ({\r\n  days,\r\n  onTimeSlotClick,\r\n}) => {\r\n  return (\r\n    <React.Fragment>\r\n      {days.map((day) => (\r\n        <div className=\"day\">\r\n          <span>{day.date.toLocaleDateString(\"hr\")}</span>\r\n          <DayComponent\r\n            day={day}\r\n            onTimeSlotClick={onTimeSlotClick}\r\n          ></DayComponent>\r\n        </div>\r\n      ))}\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import {\r\n  afternoonShift,\r\n  Calendar,\r\n  CalendarSettings,\r\n  Day,\r\n  initCalendarSettings,\r\n  morningShift,\r\n  Shift,\r\n  Slot,\r\n  TimeSlotStatus,\r\n  VisibleSlot,\r\n  saturdayShift,\r\n} from \"../models/models\";\r\n\r\ntype Time = {\r\n  hour: number;\r\n  minute: number;\r\n};\r\n\r\nexport function generateCalendar(initDate: Date): Calendar {\r\n  const startDate = new Date(initDate);\r\n  const calendarSettings = { ...initCalendarSettings };\r\n  const days: Day[] = [];\r\n  const visibleSlots: VisibleSlot[] = generateVisibleSlots();\r\n  return {\r\n    startDate,\r\n    calendarSettings,\r\n    days,\r\n    visibleSlots,\r\n  };\r\n}\r\n\r\nexport function generateCalendarDays(initDate: Date, length: number) {\r\n  return [...Array(length)].map((_, index) => {\r\n    const date = new Date(initDate);\r\n    date.setDate(initDate.getDate() + index);\r\n    return generateDay(date);\r\n  });\r\n}\r\n\r\nfunction generateDay(date: Date): Day {\r\n  const shift = calculateShift(date);\r\n  return {\r\n    date: new Date(date),\r\n    shiftSettings: shift,\r\n    timeSlots: generateTimeSlotsInADay(date, shift),\r\n  };\r\n}\r\n\r\nconst calculateMinutesFromTime = (time: Time): number => {\r\n  return time.hour * 60 + time.minute;\r\n};\r\n\r\nfunction generateTimeSlotsInADay(date: Date, shift: Shift | null): Slot[] {\r\n  const numberOfSlots = calculateNumberOfTimeSlotsInADay(initCalendarSettings);\r\n  return [...Array(numberOfSlots)].map((_, index) => ({\r\n    date: new Date(date),\r\n    duration: initCalendarSettings.timeSlotDuration,\r\n    startTime: calculateMinutesFromTime({\r\n      hour: initCalendarSettings.startHour,\r\n      minute: index * initCalendarSettings.timeSlotDuration,\r\n    }),\r\n    status: calculateTimeSlotStatusFromShift(\r\n      calculateMinutesFromTime({\r\n        hour: initCalendarSettings.startHour,\r\n        minute: index * initCalendarSettings.timeSlotDuration,\r\n      }),\r\n      shift\r\n    ),\r\n  }));\r\n}\r\n\r\nfunction calculateTimeSlotStatusFromShift(\r\n  startTime: number,\r\n  shift: Shift | null\r\n): TimeSlotStatus {\r\n  if (!shift) {\r\n    return TimeSlotStatus.NOT_WORKING;\r\n  }\r\n  if (startTime < shift.startTime || startTime >= shift.endTime) {\r\n    return TimeSlotStatus.NOT_WORKING;\r\n  } else if (startTime === shift.breakStart) {\r\n    return TimeSlotStatus.LUNCH_BREAK;\r\n  }\r\n  return TimeSlotStatus.AVAILABLE;\r\n}\r\n\r\nconst isSaturday = (date: Date) => date.getDay() === 6;\r\nconst isSunday = (date: Date) => date.getDay() === 0;\r\nconst isOddDayOfMonth = (date: Date) => date.getDate() % 2 !== 0;\r\nconst isEvanDayOfMonth = (date: Date) => date.getDate() % 2 === 0;\r\n\r\nfunction calculateShift(date: Date) {\r\n  if (isSunday(date) || (isOddDayOfMonth(date) && isSaturday(date))) {\r\n    return null;\r\n  } else if (isEvanDayOfMonth(date) && isSaturday(date)) {\r\n    return saturdayShift;\r\n  } else if (isEvanDayOfMonth(date)) {\r\n    return morningShift;\r\n  } else if (isOddDayOfMonth(date)) {\r\n    return afternoonShift;\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction generateVisibleSlots(): VisibleSlot[] {\r\n  const start = initCalendarSettings.startHour * 60;\r\n  const slotDuration = initCalendarSettings.timeSlotDuration;\r\n  const numberOfSlots = calculateNumberOfTimeSlotsInADay(initCalendarSettings);\r\n  return [...Array(numberOfSlots)].map((_, index) => ({\r\n    display: true,\r\n    duration: slotDuration,\r\n    startTime: start + index * slotDuration,\r\n  }));\r\n}\r\n\r\nfunction calculateNumberOfTimeSlotsInADay(\r\n  calendarSettings: CalendarSettings\r\n): number {\r\n  const start = calendarSettings.startHour * 60;\r\n  const end = calendarSettings.endHour * 60;\r\n  const slotDuration = calendarSettings.timeSlotDuration;\r\n  return (end - start) / slotDuration;\r\n}\r\n","import { Day, Slot, TimeSlotStatus } from \"../models/models\";\r\nimport { generateCalendarDays } from \"./generateCalendar\";\r\n\r\nexport function generateCalendarData(\r\n  startDate: Date,\r\n  numberOfDays: number\r\n): Day[] {\r\n  const days = generateCalendarDays(startDate, numberOfDays);\r\n  const reservedSlots = generateRandomReservations(days);\r\n\r\n  const weekFilledWithReservatiosn = addReservedSlotToWeek(days, reservedSlots);\r\n  return weekFilledWithReservatiosn;\r\n}\r\n\r\nconst generateRandomReservations = (days: Day[]): Slot[] => {\r\n  const randomSlots: Slot[] = [];\r\n  while (randomSlots.length < 16) {\r\n    const daysWithAvailableSlot = days.filter((day) =>\r\n      day.timeSlots.find((slot) => slot.status === TimeSlotStatus.AVAILABLE)\r\n    );\r\n    const randomDayIndex = Math.floor(\r\n      Math.random() * daysWithAvailableSlot.length\r\n    );\r\n    const randomDay = daysWithAvailableSlot[randomDayIndex];\r\n    const availableSlots = randomDay.timeSlots.filter(\r\n      (slot) => slot.status === TimeSlotStatus.AVAILABLE\r\n    );\r\n    const randomSlotIndex = Math.floor(Math.random() * availableSlots.length);\r\n    const randomSlot = availableSlots[randomSlotIndex];\r\n    const checkIfAlreadyExist = randomSlots.find(\r\n      (slot) =>\r\n        slot.date.getTime() === randomSlot.date.getTime() &&\r\n        slot.startTime === randomSlot.startTime\r\n    );\r\n    if (!checkIfAlreadyExist) {\r\n      randomSlots.push(randomSlot);\r\n    }\r\n  }\r\n  return randomSlots;\r\n};\r\n\r\nconst addReservedSlotToWeek = (days: Day[], reservedSlots: Slot[]): Day[] => {\r\n  return days.map((day) => {\r\n    return {\r\n      ...day,\r\n      timeSlots: day.timeSlots.map((slot) => {\r\n        const findIfSlotReserved = reservedSlots.find(\r\n          (reservedSlot) =>\r\n            reservedSlot.date.getTime() === slot.date.getTime() &&\r\n            reservedSlot.startTime === slot.startTime\r\n        );\r\n        if (findIfSlotReserved) {\r\n          return {\r\n            ...slot,\r\n            status: TimeSlotStatus.UNAVAILABLE,\r\n          };\r\n        }\r\n        return slot;\r\n      }),\r\n    };\r\n  });\r\n};\r\n","import { useReducer } from \"react\";\r\nimport { generateCalendarData } from \"../init/generateRandomData\";\r\nimport {\r\n  Day,\r\n  initCalendarSettings,\r\n  Slot,\r\n  TimeSlotStatus,\r\n} from \"../models/models\";\r\nimport {\r\n  checkReservationInAWeekLimit,\r\n  checkReservationInADayLimit,\r\n} from \"../services/validators\";\r\n\r\ntype Action =\r\n  | { type: \"reserve_slot\"; slot: Slot }\r\n  | { type: \"remove_reservation_from_slot\"; slot: Slot };\r\n\r\nfunction reducer(state: Day[], action: Action): Day[] {\r\n  switch (action.type) {\r\n    case \"reserve_slot\":\r\n      return state.map((day) => {\r\n        if (day.date.getTime() === action.slot.date.getTime()) {\r\n          return {\r\n            ...day,\r\n            timeSlots: day.timeSlots.map((slot) => {\r\n              if (slot.startTime === action.slot.startTime) {\r\n                return {\r\n                  ...slot,\r\n                  status: TimeSlotStatus.RESERVED,\r\n                };\r\n              }\r\n              return slot;\r\n            }),\r\n          };\r\n        }\r\n        return day;\r\n      });\r\n    case \"remove_reservation_from_slot\":\r\n      return state.map((day) => {\r\n        if (day.date.getTime() === action.slot.date.getTime()) {\r\n          return {\r\n            ...day,\r\n            timeSlots: day.timeSlots.map((slot) => {\r\n              if (slot.startTime === action.slot.startTime) {\r\n                return {\r\n                  ...slot,\r\n                  status: TimeSlotStatus.AVAILABLE,\r\n                };\r\n              }\r\n              return slot;\r\n            }),\r\n          };\r\n        }\r\n        return day;\r\n      });\r\n  }\r\n}\r\n\r\nexport function useCalendarReducer() {\r\n  const [state, dispatch] = useReducer(\r\n    reducer,\r\n    generateCalendarData(new Date(), initCalendarSettings.daysToDisplay)\r\n  );\r\n  const onTimeSlotClick = (slot: Slot) => {\r\n    switch (slot.status) {\r\n      case TimeSlotStatus.AVAILABLE:\r\n        if (checkReservationInAWeekLimit(state, slot)) {\r\n          alert(\"Week max limit reached\");\r\n        } else if (checkReservationInADayLimit(state, slot)) {\r\n          alert(\"Day max limit reached\");\r\n        } else dispatch({ type: \"reserve_slot\", slot });\r\n\r\n        break;\r\n\r\n      case TimeSlotStatus.RESERVED:\r\n        dispatch({ type: \"remove_reservation_from_slot\", slot });\r\n        break;\r\n\r\n      default:\r\n        alert(\"Error\");\r\n    }\r\n  };\r\n  return { updateSlot: onTimeSlotClick, state, dispatch };\r\n}\r\n","import { Day, Slot, TimeSlotStatus } from \"../models/models\";\r\n\r\nexport const checkReservationInAWeekLimit = (days: Day[], slot: Slot) => {\r\n  const activeReservations = days.reduce((all, day) => {\r\n    const activeReservationInADay = day.timeSlots.filter(\r\n      (slot) => slot.status === TimeSlotStatus.RESERVED\r\n    );\r\n    return all + activeReservationInADay.length;\r\n  }, 0);\r\n  return activeReservations > 1;\r\n};\r\n\r\nexport const checkReservationInADayLimit = (days: Day[], slot: Slot) => {\r\n  const selectedDay = days.find(\r\n    (day) => day.date.getTime() === slot.date.getTime()\r\n  );\r\n  if (selectedDay) {\r\n    const activeReservationInADay = selectedDay.timeSlots.filter(\r\n      (slot) => slot.status === TimeSlotStatus.RESERVED\r\n    );\r\n    return activeReservationInADay.length > 0;\r\n  }\r\n  return false;\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { TimeScale } from \"./components/timeScale/timeScale\";\nimport { Week } from \"./components/week/week\";\nimport { useCalendarReducer } from \"./hooks/useCalendarReducer\";\nimport { generateCalendar } from \"./init/generateCalendar\";\n\nfunction App() {\n  const calendar = generateCalendar(new Date());\n  const { state, updateSlot } = useCalendarReducer();\n\n  return (\n    <div className=\"App\">\n      <span className=\"times\">\n        <TimeScale calendar={calendar}></TimeScale>\n      </span>\n      <div className=\"week\">\n        <Week days={state} onTimeSlotClick={updateSlot}></Week>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}